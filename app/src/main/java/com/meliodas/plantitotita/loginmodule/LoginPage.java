package com.meliodas.plantitotita.loginmodule;

import android.content.*;
import android.graphics.drawable.ColorDrawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;
import android.view.*;
import android.widget.*;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import com.google.android.gms.auth.api.signin.*;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.*;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.SetOptions;
import com.meliodas.plantitotita.R;
import com.meliodas.plantitotita.mainmodule.DatabaseManager;
import com.meliodas.plantitotita.mainmodule.HomePage;
import com.shobhitpuri.custombuttons.GoogleSignInButton;

import java.util.HashMap;
import java.util.Map;

public class LoginPage extends AppCompatActivity {

    private static final int RC_SIGN_IN = 100;
    private FirebaseAuth mAuth;
    private GoogleSignInClient googleSignInClient;

    private EditText editTextEmailAddressLogin, editTextPasswordLogin;
    private Button btnLogin;
    private GoogleSignInButton googleSignInButton;
    private String userID;

    @Override
    protected void onStart() {
        super.onStart();
        // Check if user is signed in
        FirebaseUser currentUser = mAuth.getCurrentUser();
        if (currentUser != null) {
            startActivity(new Intent(LoginPage.this, HomePage.class));
            finish();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login_page);

        // Initialize Firebase Auth
        mAuth = FirebaseAuth.getInstance();

        // Initialize UI Components
        editTextEmailAddressLogin = findViewById(R.id.editTxtEmailAddressLogin);
        editTextPasswordLogin = findViewById(R.id.editTxtPasswordLogin);
        btnLogin = findViewById(R.id.btnLogin1);
        googleSignInButton = findViewById(R.id.btnGoogleSignIn);

        // Configure Google Sign-In options for Firebase
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))  // This string is auto-generated by Firebase
                .requestEmail()
                .requestProfile()
                .build();

        // Build Google Sign-In client
        googleSignInClient = GoogleSignIn.getClient(this, gso);

        // Google Sign-In button click listener
        googleSignInButton.setOnClickListener(view -> {
            // Sign out before signing in to prevent cached credentials issues
            googleSignInClient.signOut().addOnCompleteListener(task -> {
                Intent signInIntent = googleSignInClient.getSignInIntent();
                startActivityForResult(signInIntent, RC_SIGN_IN);
            });
        });

        // Regular login button listener remains the same
        btnLogin.setOnClickListener(this::onClickLogin);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            try {
                // Get Google Sign-In account
                GoogleSignInAccount account = task.getResult(ApiException.class);
                Log.d("LoginPage", "FirebaseAuthWithGoogle:" + account.getId());
                firebaseAuthWithGoogle(account.getIdToken());
            } catch (ApiException e) {
                Log.w("LoginPage", "Google sign in failed", e);
                Toast.makeText(this, "Google Sign-In failed: " + e.getLocalizedMessage(),
                        Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void firebaseAuthWithGoogle(String idToken) {
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        // Sign in success
                        Log.d("LoginPage", "signInWithCredential:success");
                        FirebaseUser user = mAuth.getCurrentUser();
                        userID = user.getUid();
                        Log.d("LoginPage", "User ID: " + userID);
                        DatabaseManager dbManager = new DatabaseManager();
                        dbManager.hasUserDoc(userID, (exists) -> {
                            if (!exists) {
                                saveUserDataToFirestore(
                                        user.getDisplayName(),
                                        user.getEmail(),
                                        user.getPhotoUrl().toString()
                                );
                            }
                        });

                        startActivity(new Intent(LoginPage.this, HomePage.class));
                        finish();
                    } else {
                        // Sign in fails
                        Log.w("LoginPage", "signInWithCredential:failure", task.getException());
                        Toast.makeText(LoginPage.this, "Authentication Failed.",
                                Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void saveUserDataToFirestore(String name, String email, String image) {
        FirebaseFirestore fStore = FirebaseFirestore.getInstance();
        DocumentReference documentReference = fStore.collection("users").document(userID);
        Map<String, Object> user = new HashMap<>();
        user.put("user_name", name);
        user.put("email_address", email);
        user.put("profile_picture", image);
        documentReference.set(user, SetOptions.merge()).addOnFailureListener(e -> {
            Toast.makeText(LoginPage.this, "Error saving user data", Toast.LENGTH_SHORT).show();
        });
    }

    public void onClickLogin(View v) {
        String email = editTextEmailAddressLogin.getText().toString().trim();
        String password = editTextPasswordLogin.getText().toString().trim();

        if (email.isEmpty()) {
            editTextEmailAddressLogin.setError("Email can't be blank.");
            return;
        }

        if (password.isEmpty()) {
            editTextPasswordLogin.setError("Password can't be blank.");
            return;
        }

        // Firebase email-password authentication
        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        FirebaseUser user = mAuth.getCurrentUser();
                        if (user != null && user.isEmailVerified()) {
                            startActivity(new Intent(LoginPage.this, HomePage.class));
                            finish();
                        } else {
                            Toast.makeText(this, "Please verify your email first.", Toast.LENGTH_SHORT).show();
                            FirebaseAuth.getInstance().signOut();
                        }
                    } else {
                        Log.e("LoginPage", "Email Login Failed", task.getException());
                        Toast.makeText(this, "Login failed. Check credentials.", Toast.LENGTH_SHORT).show();
                    }
                });
    }
}
